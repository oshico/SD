/**
 * <p>
 * Title: Projecto SD</p>
 * <p>
 * Description: Projecto apoio aulas SD</p>
 * <p>
 * Copyright: Copyright (c) 2011</p>
 * <p>
 * Company: UFP </p>
 *
 * @author Rui Moreira
 * @version 2.0
 */
package edu.ufp.inf.sd.rmi.p05_observer.client;

import edu.ufp.inf.sd.rmi.p04_diglib.client.DigLibClient;
import edu.ufp.inf.sd.rmi.p05_observer.server.State;
import edu.ufp.inf.sd.rmi.p05_observer.server.SubjectRI;
import edu.ufp.inf.sd.rmi.util.rmisetup.SetupContextRMI;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.rmi.NotBoundException;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 * @author rjm
 */
public class ObserverGuiClient extends javax.swing.JFrame {

    /**
     * Context for connecting a RMI client to a RMI Servant
     */
    private SetupContextRMI contextRMI;
    /**
     * Remote interface that will hold the Servant proxy
     */
    private SubjectRI subjectRI;

    private ObserverImpl observer;

    private Logger logger;
    private String username;

    /**
     * Creates new form ChatClientFrame
     *
     * @param args main args with ip, port and service name
     */
    public ObserverGuiClient(String args[]) {
        //0. Get Logger for debug messages
        logger = Logger.getLogger(this.getClass().getName());
        //1. Init the GUI components
        initComponents();
        //2. Init the RMI context (load security manager, lookup subject, etc.)
        initContext(args);
        //3. Create p05_observer (which attaches himself to subject)
        initObserver(args);
    }

    private void initContext(String args[]) {
        try {
            String registryIP=InetAddress.getLocalHost().getHostAddress();
            int registryPort=1099;
            String serviceName="DigLibService";

            //1. ============ Get info from args ============
            registryIP=args[0];
            registryPort=Integer.parseInt(args[1]);
            serviceName=args[2];
            this.username = args[3];

            //2. ============ Get proxy to RMIRegistry ============
            logger.log(Level.INFO, "going to get reference to RMIRegistry on registryPort = " + registryPort);
            Registry registry = LocateRegistry.getRegistry(registryPort);
            //List available services...
            String[] servicesList=registry.list();
            for (String srvName : servicesList) {
                logger.log(Level.INFO, "available srvName = " + srvName);
            }

            //3. ============ Use RMIRegistry to get/lookup proxy to service ============
            String serviceUrl = "rmi://" + registryIP + ":" + registryPort + "/" + serviceName;
            logger.log(Level.INFO, "goint to get reference to SubjectRI on serviceUrl = " + serviceUrl);
            this.subjectRI = (SubjectRI) registry.lookup(serviceUrl);
            logger.log(Level.INFO, "Got SubjectRI for serviceName = " + serviceName);

        } catch (RemoteException | UnknownHostException | NotBoundException e) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, e);
        }
    }

    private void initObserver(String args[]) {
        try {
            //String username=this.jTextFieldUsername.getText();
            this.jTextFieldUsername.setText(this.username);
            this.observer = new ObserverImpl(this.username, this, this.subjectRI);
            logger.log(Level.INFO, "Observer is running for username = " + this.username);

        } catch (Exception e) {
            Logger.getLogger(ObserverGuiClient.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    protected void updateTextArea() {
        String msg="[" + this.observer.getLastState().getId() + "] " + this.observer.getLastState().getInfo();
        this.jTextAreaChatHistory.append(msg + '\n');
    }

    /**
     * This method is called from within the constructor to initialize form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1=new javax.swing.JFileChooser();
        jScrollPane1=new javax.swing.JScrollPane();
        jTextAreaChatHistory=new javax.swing.JTextArea();
        jButtonSend=new javax.swing.JButton();
        jTextFieldMsg=new javax.swing.JTextField();
        jLabelUserID=new javax.swing.JLabel();
        jTextFieldUsername=new javax.swing.JTextField();
        jMenuBar1=new javax.swing.JMenuBar();
        jMenu1=new javax.swing.JMenu();
        jMenuItemExit=new javax.swing.JMenuItem();
        jMenuItemSave=new javax.swing.JMenuItem();
        jMenu2=new javax.swing.JMenu();
        jMenuItemCopy=new javax.swing.JMenuItem();
        jMenuItemPaste=new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextAreaChatHistory.setColumns(20);
        jTextAreaChatHistory.setLineWrap(true);
        jTextAreaChatHistory.setRows(5);
        jTextAreaChatHistory.setEnabled(false);
        jScrollPane1.setViewportView(jTextAreaChatHistory);

        jButtonSend.setText("Send");
        jButtonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendActionPerformed(evt);
            }
        });

        jTextFieldMsg.setText("msg");
        jTextFieldMsg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldMsgKeyPressed(evt);
            }
        });

        jLabelUserID.setText("User ID");

        jTextFieldUsername.setText("rmoreira");

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemExit);

        jMenuItemSave.setText("Save");
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemSave);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItemCopy.setText("Copy");
        jMenuItemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCopyActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemCopy);

        jMenuItemPaste.setText("Paste");
        jMenuItemPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPasteActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemPaste);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout=new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabelUserID)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jTextFieldUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                                        .addComponent(jTextFieldMsg, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonSend))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextFieldMsg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButtonSend))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabelUserID)
                                        .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCopyActionPerformed
        // TODO add your handling code here:
        this.jTextAreaChatHistory.selectAll();
        this.jTextAreaChatHistory.copy();
    }//GEN-LAST:event_jMenuItemCopyActionPerformed

    private void jMenuItemPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPasteActionPerformed
        // TODO add your handling code here:
        this.jTextAreaChatHistory.paste();
    }//GEN-LAST:event_jMenuItemPasteActionPerformed

    private void jButtonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed
        // TODO add your handling code here:
        //    this.jTextArea1.append(this.jTextField1.getText() + "\n");
        //    this.jTextField1.setText("");
        try {
            State s=new State(this.jTextFieldUsername.getText(), this.jTextFieldMsg.getText());
            this.observer.getSubjectRI().setState(s);
        } catch (RemoteException ex) {
            Logger.getLogger(ObserverGuiClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonSendActionPerformed

    private void jTextFieldMsgKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldMsgKeyPressed
        // TODO add your handling code here:
        char c=evt.getKeyChar();
        if (c == '\n' || c == '\r') {
            //this.jTextArea1.append(this.jTextField1.getText() + "\n");
            //this.jTextField1.setText("");
            try {
                State s=new State(this.jTextFieldUsername.getText(), this.jTextFieldMsg.getText());
                this.observer.getSubjectRI().setState(s);
            } catch (RemoteException ex) {
                Logger.getLogger(ObserverGuiClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jTextFieldMsgKeyPressed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        // TODO add your handling code here:
        try {
            this.subjectRI.detach(this.observer);
        } catch (RemoteException e) {
            e.printStackTrace();
        }
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveActionPerformed
        // TODO add your handling code here:
        FileWriter fw=null;
        try {
            this.jFileChooser1=new JFileChooser(new File("C:\\Temp"));
            this.jFileChooser1.showSaveDialog(this);
            File f=this.jFileChooser1.getSelectedFile();
            if (f != null) {
                fw=new FileWriter(f);
                PrintWriter pw=new PrintWriter(fw);
                pw.println(this.jTextAreaChatHistory.getText());
            }
        } catch (IOException ex) {
            Logger.getLogger(ObserverGuiClient.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fw.close();
            } catch (IOException ex) {
                Logger.getLogger(ObserverGuiClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItemSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //List and set args
        SetupContextRMI.printArgs(ObserverGuiClient.class.getName(), args);

        //Run GUI inside a thread
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                if (args.length < 4) {
                    System.err.println("usage: java [options] edu.ufp.sd.inf.rmi.p05_observer.server.ObserverGuiClient <rmi_registry_ip> <rmi_registry_port> <service_name> <username>");
                    System.exit(-1);
                } else {
                    new ObserverGuiClient(args).setVisible(true);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSend;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabelUserID;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemCopy;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemPaste;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaChatHistory;
    private javax.swing.JTextField jTextFieldMsg;
    private javax.swing.JTextField jTextFieldUsername;
    // End of variables declaration//GEN-END:variables
}
